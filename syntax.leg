%{
#include <stdio.h>
#include <signal.h>
#include <time.h>
#include <stdarg.h>
#include "bstrlib.h"

#define YY_noDEBUG 1
#define KBYTE 1024
#define MBYTE KBYTE * 1024
#define IMAGE_FRAME 1
#define IMAGE_THUMB ( 1 << 1 )
#define STR_BUFFER_LEN 1024 

int current_header_level = 0;
int current_bullet_list_level;
int current_numbered_list_level;
int start_of_line = 1;
char protocol[5];
int image_attributes = 0;
char image_url[STR_BUFFER_LEN];
bstring image_variables;

void remove_parentheticals(bstring str) {
  char *temp = bstr2cstr(str, '\0');

  int i, index = 0;
  int in_tag = 0;
  for(i = 0; i < blength(str); i++) {
    if((bdata(str))[i] == '(') {
      in_tag = 1;
      continue;
    } else if((bdata(str))[i] == ')') {
      in_tag = 0;
      continue;
    }
    if(!in_tag) temp[index++] = (bdata(str))[i];
  }
  temp[index] = '\0';
  bdestroy(str);
  str = bfromcstr(temp);
  bcstrfree(temp);
}

void strip_tags(bstring str) {
  char *temp = bstr2cstr(str, '\0');

  int i, index = 0;
  int in_tag = 0;
  for(i = 0; i < blength(str); i++) {
    if((bdata(str))[i] == '<') {
      in_tag = 1;
      continue;
    } else if((bdata(str))[i] == '>') {
      in_tag = 0;
      continue;
    }
    if(!in_tag) temp[index++] = (bdata(str))[i];
  }
  temp[index] = '\0';
  bdestroy(str);
  str = bfromcstr(temp);
  bcstrfree(temp);
}

void strip_html_markup(bstring str) {
  strip_tags(str);
  brtrimws(str);
  bstring find = bfromcstr(" ");
  bstring replace = bfromcstr("_");
  bfindreplace(str, find, replace, 0);
  bdestroy(find);
  bdestroy(replace);
}

int in_tag = 0;
bstring tag_content;
unsigned int tag_content_size = 2 * MBYTE;

void open_tag(char *tag, char *args) {
  if(args) {
    printf("<%s %s>", tag, args);
  } else {
    printf("<%s>", tag);
  }

  in_tag = 1;
  if(tag_content) {
    btrunc(tag_content,0 );
  }
}

void close_tag(char *tag) {
  printf("</%s>", tag);
  in_tag = 0;
}

void append_to_tag_content(char *fmt, ...) {
  if(!in_tag) {
    va_list argp;
	va_start(argp, fmt);
    vprintf(fmt, argp);
	va_end(argp);
    return;
  }

  int ret;
  bvformata(ret, tag_content, fmt, fmt);
}

%}

# High-level
page =  nowiki | pre_block | wikitext_line | wikitext
wikitext_line = paragraph | horizontal_line | notoc
wikitext = template | heading | indentation | list | formatting | image | link | table | anything_else | eol

# Generally useful rules
eol = '\n' { start_of_line = 1; }
eof = !.
space = [\t ]

# Headings
heading = heading_marker {
    char tag[4];
    sprintf(tag, "h%d", current_header_level);
    open_tag(tag, NULL);
  } space* heading_text heading_marker space* ( eol | eof ) 
  {
	brtrimws(tag_content);
  	bstring tmp = bstrcpy(tag_content);
	strip_html_markup(tmp);
    printf("<span class=\"editsection\">[<a href=\"edit\">edit</a>]</span><span class=\"mw-headline\" id=\"%s\">", bdata(tmp));
	bdestroy(tmp);

    printf("%s</span>", bdata(tag_content));
    char tag[4];
    sprintf(tag, "h%d", current_header_level);
    close_tag(tag);
    current_header_level = 0;

  	tmp = bstrcpy(tag_content);
	strip_html_markup(tmp);
    printf("<a name=\"%s\" />", bdata(tmp));
	bdestroy(tmp);
	btrunc(tag_content, 0);
  }
heading_text = < ( !heading_marker ( formatting | link | anything_else ) )* > 
heading_marker = < '=' '='+ > { if(current_header_level == 0) current_header_level = (yyleng > 5) ? 5 : yyleng; }

# Paragraph
paragraph = wikitext eol eol { printf("</p><p>"); }
horizontal_line = "----" ( eol | eof )  { printf("<hr/>"); }

# Indentation
indentation = &{ start_of_line } ':' { printf("&nbsp;&nbsp;"); } wikitext

# Lists
list = bullet_list | numbered_list

# Bullet list
bullet_list = { printf("<ul>"); } bullet_list_entry+ { 
  while((current_bullet_list_level > 0) && current_bullet_list_level--) { 
    printf("</ul>"); 
  }
}
bullet_list_entry = bullet space* ( !eol wikitext )* ( eol | eof ) { printf("</li>"); }
bullet = < '*'+ > {
  start_of_line = 0;
  if(current_bullet_list_level < yyleng && current_bullet_list_level != 0) {
    printf("<ul>");
  } else if(current_bullet_list_level > yyleng) {
    printf("</ul>");
  }
  current_bullet_list_level = yyleng; 
  printf("<li>"); 
}

# Numbered list
numbered_list = { printf("<ol>"); } numbered_list_entry+ { while(current_numbered_list_level--) { printf("</ol>"); } }
numbered_list_entry = numbered space* ( !eol wikitext )* eol? { printf("</li>"); }
numbered = < '#'+ > {
  start_of_line = 0;
  if(current_numbered_list_level < yyleng && current_numbered_list_level != 0) {
    printf("<ol>");
  } else if(current_numbered_list_level > yyleng) {
    printf("</ol>");
  }
  current_numbered_list_level = yyleng; 
  printf("<li>"); 
}

# Formatting
formatting = bold_italic | bold | italic
bold_italic = "'''''" {append_to_tag_content("<b><i>");}( !"'''''" wikitext )* "'''''" {append_to_tag_content("</i></b>");}
bold = "'''" {append_to_tag_content("<b>");}( !"'''" wikitext )* "'''" {append_to_tag_content("</b>");}
italic = "''" {append_to_tag_content("<i>");}( !"''" wikitext )* "''" {append_to_tag_content("</i>");}

# pre-formatted blocks
pre_block = &{ start_of_line } { printf("<pre>"); } pre_line+ { printf("</pre>"); }
pre_line = ' ' < ( !eol . )* ( eol | eof ) > { printf("%s", yytext); }
nowiki = '<nowiki>' ( !'</nowiki>' anything_else )* '</nowiki>'

# Links
link = renamed_link | simple_link | external_link { start_of_line = 0; }
renamed_link = '[[' < ( !'|' !']]' . )* > { 
    bstring path = bfromcstr(yytext);
    strip_html_markup(path);
    append_to_tag_content("<a href=\"/%s\">", bdata(path));
    bdestroy(path);
  } '|' < ( !']]' . )* > { 
    append_to_tag_content("%s</a>", yytext); 
    start_of_line = 0; // prevent <pre> block from starting due to the next space
  } ']]'
simple_link = '[[' ':'? < ( !']]' . )* > {
    bstring path = bfromcstr(yytext);
    strip_html_markup(path);
    bstring name = bfromcstr(yytext);
    remove_parentheticals(name);
	brtrimws(name);
    append_to_tag_content("<a href=\"/%s\">%s", bdata(path), bdata(name));
    bdestroy(path);
    bdestroy(name);
  } ']]' < ( !space !( '=' '='+  ) !'[' !eol !eof . )* > { 
    append_to_tag_content("%s</a>", yytext); 
    start_of_line = 0; // prevent <pre> block from starting due to the next space 
  }
external_link = named_link | unnamed_link | url
named_link = '[' { append_to_tag_content("<a href=\""); } link_url { append_to_tag_content("\">");} ' '+ link_name + space* ']' {append_to_tag_content("</a>"); }
link_url = < ( !' ' . )+ >  { append_to_tag_content(yytext); }
link_name = < ( !']' . )+ > { append_to_tag_content(yytext); }
unnamed_link = '[' < ( !']' . )* > ']' { append_to_tag_content("<a href=\"%s\">%s</a>", yytext, yytext);}
url = < ( 'http' | 'https' | 'ftp' ) > { strcpy(protocol, yytext); } '://' < ( !eol !' ' . )* > { append_to_tag_content("<a href=\"%s://%s\">%s://%s</a>", protocol, yytext, protocol, yytext); }

# Images
image = open_image { btrunc(image_variables, 0); } file_indicator arguments? close_image {
  if(image_attributes & IMAGE_FRAME) {
    printf("<div class=\"thumb tright\"><div class=\"thumbinner\">");
  }

  if(image_attributes & IMAGE_THUMB) {
    printf("<a href=\"File:%s\" class=\"image\"><img src=\"%s\" width=\"220\" height=\"30\" class=\"thumbimage\"/></a>", image_url, image_url);
  } else if(image_attributes & IMAGE_FRAME) {
    printf("<a href=\"File:%s\" class=\"image\"><img src=\"%s\" class=\"thumbimage\"/></a>", image_url, image_url);
  } else {
    printf("<a href=\"File:%s\" class=\"image\"><img src=\"%s\" %s/></a>", image_url, image_url, bdata(image_variables));
  }

  if(image_attributes & IMAGE_FRAME) {
    printf("<div class=\"thumbcaption\"></div></div>");
  }
} 
open_image = '[[' space*
close_image = space* ']]'
file_indicator = ( 'File:' | 'Image:' ) < ( !'|' !close_image . )* > { strncpy(image_url, yytext, STR_BUFFER_LEN); }
arguments = '|' variable value? arguments?
variable = special_image_variables | generic_variable
special_image_variables = image_type | float
image_type = frame | thumb
frame = 'frame' { image_attributes |= IMAGE_FRAME; }
thumb = ( 'thumbnail' | 'thumb' ) { image_attributes |= IMAGE_THUMB; }
float = < ( 'left' | 'right' | 'center' ) > { 
  bstring temp = bformat(" class=\"float%s\"", yytext); 
  bconcat(image_variables, temp);
  bdestroy(temp);
} | 'none'
generic_variable = < ( !'|' !'=' !close_image . )* > { 
  bstring temp = bfromcstr(yytext);
  bconcat(image_variables, temp);
  bdestroy(temp);
}
value = '=' < ( !'|' !close_image . )* > { 
  bstring temp = bformat("=\"%s\"", yytext);
  bconcat(image_variables, temp);
  bdestroy(temp);
}

# Tables
table = '{|' 
  { printf("<table>"); }
  eol table_body '|}' ( eol | eof )
  { printf("</table>"); }
table_body = table_caption? table_header? table_row+
table_caption = '|+' ' '+ < ( !eol . )* > eol { printf("<caption>%s</caption>", yytext); }
table_row = '|-'
  { printf("<tr>"); }
  space* eol table_heading* table_cell*
  { printf("</tr>"); }
table_cell = '|'?
  { printf("<td>"); }
  ' '+ < ( !'||' !eol . )* > ( eol | '||' )
  { printf("%s</td>", yytext); }
table_header = { printf("<tr>"); } table_heading+ { printf("</tr>"); }
table_heading = { printf("<th"); }'!' ' '+ < ( !' |' . )* > { printf(" %s>", yytext); } ' |' space* < ( !eol . )* > eol {printf("%s</th>", yytext); }

# Templates
template = '{{' space* ( !'}}' . )* '}}' { start_of_line = 0; }

# __NOTOC__
notoc = '__NOTOC__'

# Other shit
anything_else = < !eol . > { start_of_line = 0; append_to_tag_content(yytext); }


%%

int main() {
  tag_content = bfromcstr("");
  ballocmin(tag_content, tag_content_size);

  image_variables = bfromcstr("");

  printf("<p>");
  while(yyparse()) {}
  printf("</p>");
  bdestroy(tag_content);

  return 0;
}
